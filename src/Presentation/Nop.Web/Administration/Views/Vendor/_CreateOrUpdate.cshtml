@model VendorModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)


<div id="vendor-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Vendors.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Common.SEO")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Common.Products")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabSeo()
    </div>
    <div>
        @TabProducts()
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#vendor-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "vendor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">







@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-info-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].Name)
                @Html.ValidationMessageFor(model => model.Locales[item].Name)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].Description):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                @Html.ValidationMessageFor(model => model.Locales[item].Description)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
                ,
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Description):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.Description, "RichEditor")
                @Html.ValidationMessageFor(model => model.Description)
            </td>
        </tr>
    </table>
                                            ))
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.VendorType):
            </td>
            <td class="adminData">
                <select id="VendorType" name="VendorType">
                    <option value="0" @(Model.VendorType == Nop.Core.Domain.Vendors.VendorType.User ? "selected" : string.Empty)>Usuario</option>
                    <option value="1" @(Model.VendorType == Nop.Core.Domain.Vendors.VendorType.Market ? "selected" : string.Empty)>Empresa</option>
                </select>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.HasPlan):
            </td>
            <td class="adminData">
                @(Model.HasPlan ? "Si" : "No")
            </td>
        </tr>
        @if (Model.HasPlan)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.PlanExpiredOnUtc):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.PlanExpiredOnUtc)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.PlanName):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.PlanName)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ShowOnHomePage):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ShowOnHomePage)
                @Html.ValidationMessageFor(model => model.ShowOnHomePage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CustomerId):
            </td>
            <td class="adminData">
                @if (Model.CustomerId.HasValue)
                {
                    @Html.ActionLink("Ver", "Edit", "Customer", new { id = Model.CustomerId }, new { })
                }
                else
                {
                    @:No
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AdminComment):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment, new { style = "Width: 250px; Height: 150px;" })
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AllowCustomersToSelectPageSize):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.AllowCustomersToSelectPageSize)
                @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
            </td>
        </tr>
        <tr id="pnlPageSize">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PageSize):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSize)
                @Html.ValidationMessageFor(model => model.PageSize)
            </td>
        </tr>
        <tr id="pnlPageSizeOptions">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PageSizeOptions):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSizeOptions)
                @Html.ValidationMessageFor(model => model.PageSizeOptions)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PhoneNumber):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.PhoneNumber)
                @Html.ValidationMessageFor(model => model.PhoneNumber)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DisplayOrder):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.AssociatedCustomerEmails):
                </td>
                <td class="adminData">
                    @if (Model.AssociatedCustomerEmails.Count > 0)
                    {
                        for (int i = 0; i < Model.AssociatedCustomerEmails.Count; i++)
                        {
                            @Model.AssociatedCustomerEmails[i]
                            if (i != Model.AssociatedCustomerEmails.Count - 1)
                            {
                                <text>, </text>
                            }
                        }
                    }
                    else
                    {
                        @T("Admin.Vendors.Fields.AssociatedCustomerEmails.None")
                    }
                </td>
            </tr>
        }
    </table>
}
@helper TabSeo()
{
    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-seo-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaKeywords):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].MetaKeywords)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaDescription):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.Locales[item].MetaDescription)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaTitle):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].MetaTitle)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].SeName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].SeName)
                @Html.ValidationMessageFor(model => model.Locales[item].SeName)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
               ,
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.MetaKeywords):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.MetaKeywords)
                @Html.ValidationMessageFor(model => model.MetaKeywords)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.MetaDescription):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(x => x.MetaDescription)
                @Html.ValidationMessageFor(model => model.MetaDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.MetaTitle):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.MetaTitle)
                @Html.ValidationMessageFor(model => model.MetaTitle)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SeName):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.SeName)
                @Html.ValidationMessageFor(model => model.SeName)
            </td>
        </tr>
    </table>))
}

@helper TabProducts()
{
    if (Model.Id > 0)
    {
        
            <div id="products-grid"></div>

            <script>
                $(document).ready(function () {
                    $("#products-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("ProductsList", "Vendor", new { vendorId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json"
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        Name: { type: "string" },
                                        //ProductId: { editable: false, type: "number" },
                                        ProductId: { editable: false, type: "number" },
                                        Published: { editable: false, type: "boolean" }
                                    }
                                }
                            },
                            error: function (e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: 10,
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [10,20,30,100]
                        },
                        scrollable: false,
                        columns: [{
                            field: "Id",
                            title: "@T("Admin.Catalog.Products.Vendors.Products.ProductId")",
                            width: 200
                        },
                        {
                            field: "Name",
                            title: "@T("Admin.Catalog.Products.Vendors.Products.Name")",
                            width: 200
                        },
                        {
                            field: "Published",
                            title: "@T("Admin.Catalog.Products.Vendors.Products.Published")",
                            width: 200
                        },
                        {
                            field: "Ver",
                            template: '<a href="/admin/product/edit/#=Id#">Ver</a>'
                        }]
                    });
                });

            </script>
        }
        else
        {
            @T("Admin.Catalog.Products.SpecialCategories.NoCategoriesAvailable")
        }
    
}
