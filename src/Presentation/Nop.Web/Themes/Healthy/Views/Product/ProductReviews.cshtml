@model ProductReviewsModel
@using Nop.Web.Models.Catalog;
@{
    Layout = null;

            /*title
            Html.AddTitleParts(Model.ProductName);
            Html.AddTitleParts(T("PageTitle.ProductReviews").Text);*/
}
@*edited*@
@*<div class="page product-reviews-page">*@
<div class="page product-reviews-page" id="product-reviews-page" itemscope itemtype="http://schema.org/Review">
    @*edited*@
    @*<div class="page-title" itemprop="itemReviewed" itemscope itemtype="http://schema.org/Product">
        <h1>@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h1>
    </div>*@
    <div class="page-body">



        @if (Model.AddProductReview.CanCurrentCustomerLeaveReview)
        {
            if (Model.AddProductReview.SuccessfullyAdded)
            {
                <div class="result">
                    @Model.AddProductReview.Result
                </div>
            }
            else
            {
                <div class="write-review" id="review-form">
                    <div class="title">@T("Reviews.Write")</div>
                    @using (Html.BeginForm("ProductReviews", "Product", FormMethod.Post))
                    {
                        <div class="message-error">@Html.ValidationSummary(true)</div>
                        <div class="form-fields">
                            <div class="inputs">
                                @*@Html.LabelFor(model => model.AddProductReview.Title, new { }, ":")
                                    @Html.TextBoxFor(model => model.AddProductReview.Title, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-title" }) : (object)(new { @class = "review-title", disabled = "disabled" }))
                                    @Html.ValidationMessageFor(model => model.AddProductReview.Title)*@

                                @Html.TextBoxRequiredFor(model => model.AddProductReview.Title, htmlAttributes: new { @class = "review-title" })

                                @*<div class="text-character">Restan 140 caracteres</div>*@
                            </div>
                            <div class="review-rating" >
                                @Html.LabelFor(model => model.AddProductReview.Rating, new { }, ":")
                                <ul>
                                    <li class="first">@T("Reviews.Fields.Rating.Bad")</li>
                                    <li>
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "1", new { id = "addproductrating_1" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "2", new { id = "addproductrating_2" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "3", new { id = "addproductrating_3" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "4", new { id = "addproductrating_4" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "5", new { id = "addproductrating_5" })
                                    </li>
                                    <li class="last">@T("Reviews.Fields.Rating.Excellent")</li>
                                </ul>
                                <span class="field-validation-error" tuils-val-for="Rating"></span>
                            </div>
                            @*@Html.LabelFor(model => model.AddProductReview.ReviewText, new { }, ":")*@
                            @Html.TextAreaRequiredFor(model => model.AddProductReview.ReviewText, htmlAttributes: new { @class = "review-text", placeholder = "Haz clic aquí si quieres escribir un comentario" }, showLabel: false)
                            @*@Html.TextAreaFor(model => model.AddProductReview.ReviewText, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-text", placeholder="Haz clic aquí si quieres escribir un comentario" }) : (object)(new { @class = "review-text", disabled = "disabled" }))*@
                            @if (Model.AddProductReview.DisplayCaptcha)
                            {
                                <div class="captcha-box">
                                    @Html.Raw(Html.GenerateCaptcha())
                                </div>
                            }
                        </div>
                        <div class="buttons">
                            <input type="button" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                        </div>
                    }
                </div>
            }
        }






        @*added (moved from bottom)*@
        @if (Model.Items.Count > 0)
        {
            <div class="clear">
            </div>
            <div class="product-review-list">
                @*<div class="title">
                        @T("Reviews.ExistingReviews")
                    </div>*@
                @foreach (var review in Model.Items)
                {
                    int ratingPercent = review.Rating * 20;
                    <div class="product-review-item">
                        <div class="review-title">
                            <h3>@review.Title</h3>
                            <a href="javascript:;">Denunciar</a>
                            <div class="review-info">
                                @T("Reviews.From"):
                                @if (review.AllowViewingProfiles)
                                {
                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                }
                                else
                                {
                                    @review.CustomerName
                                }
                                <span class="separator">|</span>
                                @T("Reviews.Date"):
                                @review.WrittenOnStr
                            </div>
                        </div>
                        <div class="product-review-box" itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                            <div class="rating">
                                <div style="width: @(ratingPercent)%">
                                </div>
                                <span itemprop="ratingValue" style="display:none">@review.Rating</span>
                            </div>
                        </div>
                        <div class="clear">
                        </div>
                        <div class="review-text" itemprop="reviewBody">
                            @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                        </div>
                        <div class="clear">
                        </div>
                        @Html.Partial("_ProductReviewHelpfulness", review.Helpfulness, new ViewDataDictionary())
                    </div>
                }
            </div>
        }
        else
        {
            <div>@T("Reviews.NoReviews")</div>
        }



    </div>
</div>
