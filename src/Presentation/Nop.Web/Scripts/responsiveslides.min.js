/*! ResponsiveSlides.js v1.54
 * http://responsiveslides.com
 * http://viljamis.com
 *
 * Copyright (c) 2011-2012 @viljamis
 * Available under the MIT license
 */

/*jslint browser: true, sloppy: true, vars: true, plusplus: true, indent: 2 */

define(['jquery', 'jqueryui'], function ($) {
	var i = 0;
	$.fn.responsiveSlides = function (options) {

		// Default settings
		var settings = $.extend({
			"auto": true,             // Boolean: Animate automatically, true or false
			"speed": 500,             // Integer: Speed of the transition, in milliseconds
			"timeout": 4000,          // Integer: Time between slide transitions, in milliseconds
			"pager": false,           // Boolean: Show pager, true or false
			"nav": false,             // Boolean: Show navigation, true or false
			"random": false,          // Boolean: Randomize the order of the slides, true or false
			"pause": false,           // Boolean: Pause on hover, true or false
			"pauseControls": true,    // Boolean: Pause when hovering controls, true or false
			"prevText": "Previous",   // String: Text for the "previous" button
			"nextText": "Next",       // String: Text for the "next" button
			"maxwidth": "",           // Integer: Max-width of the slideshow, in pixels
			"navContainer": "",       // Selector: Where auto generated controls should be appended to, default is after the <ul>
			"manualControls": "",     // Selector: Declare custom pager navigation
			"namespace": "rslides",   // String: change the default namespace used
			"before": $.noop,         // Function: Before callback
			"after": $.noop           // Function: After callback
		}, options);

		return this.each(function () {

			// Index for namespacing
			i++;

			var $this = $(this),

			  // Local variables
			  vendor,
			  selectTab,
			  startCycle,
			  restartCycle,
              touchMoveBanner,
			  rotate,
			  $tabs,

			  // Helpers
			  index = 0,
			  $slide = $this.children(),
			  length = $slide.size(),
			  fadeTime = parseFloat(settings.speed),
			  waitTime = parseFloat(settings.timeout),
			  maxw = parseFloat(settings.maxwidth),
              isMobile = false,
              touchListLastPosition = false,

			  // Namespacing
			  namespace = settings.namespace,
			  namespaceIdx = namespace + i,

			  // Classes
			  navClass = namespace + "_nav " + namespaceIdx + "_nav",
			  activeClass = namespace + "_here",
			  visibleClass = namespaceIdx + "_on",
			  slideClassPrefix = namespaceIdx + "_s",

			  // Pager
			  $pager = $("<ul class='" + namespace + "_tabs " + namespaceIdx + "_tabs' />"),

			  // Styles for visible and hidden slides
			  visible = { "float": "left", "position": "relative", "opacity": 1, "zIndex": 2 },
			  hidden = { "float": "none", "position": "absolute", "opacity": 0, "zIndex": 1 },

			  // Detect transition support
			  supportsTransitions = (function () {
			  	var docBody = document.body || document.documentElement;
			  	var styles = docBody.style;
			  	var prop = "transition";
			  	if (typeof styles[prop] === "string") {
			  		return true;
			  	}
			  	// Tests for vendor specific prop
			  	vendor = ["Moz", "Webkit", "Khtml", "O", "ms"];
			  	prop = prop.charAt(0).toUpperCase() + prop.substr(1);
			  	var i;
			  	for (i = 0; i < vendor.length; i++) {
			  		if (typeof styles[vendor[i] + prop] === "string") {
			  			return true;
			  		}
			  	}
			  	return false;
			  })(),

			  // Fading animation
			  slideTo = function (idx) {

			  	settings.before(idx);
			  	// If CSS3 transitions are supported
			  	if (supportsTransitions) {
			  		$slide
					  .removeClass(visibleClass)
					  .css(hidden)
					  .eq(idx)
					  .addClass(visibleClass)
					  .css(visible);
			  		index = idx;
			  		setTimeout(function () {
			  			settings.after(idx);
			  		}, fadeTime);
			  		// If not, use jQuery fallback
			  	} else {
			  		$slide
					  .stop()
					  .fadeOut(fadeTime, function () {
					  	$(this)
						  .removeClass(visibleClass)
						  .css(hidden)
						  .css("opacity", 1);
					  })
					  .eq(idx)
					  .fadeIn(fadeTime, function () {
					  	$(this)
						  .addClass(visibleClass)
						  .css(visible);
					  	settings.after(idx);
					  	index = idx;
					  });
			  	}
			  };

			// Random order
			if (settings.random) {
				$slide.sort(function () {
					return (Math.round(Math.random()) - 0.5);
				});
				$this
				  .empty()
				  .append($slide);
			}

			// Add ID's to each slide
			$slide.each(function (i) {
				this.id = slideClassPrefix + i;
			});

			// Add max-width and classes
			$this.addClass(namespace + " " + namespaceIdx);
			if (options && options.maxwidth) {
				$this.css("max-width", maxw);
			}

			// Hide all slides, then show first one
			$slide
			  .hide()
			  .css(hidden)
			  .eq(0)
			  .addClass(visibleClass)
			  .css(visible)
			  .show();

			// CSS transitions
			if (supportsTransitions) {
				$slide
				  .show()
				  .css({
				  	// -ms prefix isn't needed as IE10 uses prefix free version
				  	"-webkit-transition": "opacity " + fadeTime + "ms ease-in-out",
				  	"-moz-transition": "opacity " + fadeTime + "ms ease-in-out",
				  	"-o-transition": "opacity " + fadeTime + "ms ease-in-out",
				  	"transition": "opacity " + fadeTime + "ms ease-in-out"
				  });
			}

			// Only run if there's more than one slide
			if ($slide.size() > 1) {

				// Make sure the timeout is at least 100ms longer than the fade
				if (waitTime < fadeTime + 100) {
					return;
				}

				// Pager
				if (settings.pager && !settings.manualControls) {
					var tabMarkup = [];
					$slide.each(function (i) {
						var n = i + 1;
						tabMarkup +=
						  "<li>" +
						  "<a href='#' class='" + slideClassPrefix + n + "'>" + n + "</a>" +
						  "</li>";
					});
					$pager.append(tabMarkup);

					// Inject pager
					if (options.navContainer) {
						$(settings.navContainer).append($pager);
					} else {
						$this.after($pager);
					}
				}

				// Manual pager controls
				if (settings.manualControls) {
					$pager = $(settings.manualControls);
					$pager.addClass(namespace + "_tabs " + namespaceIdx + "_tabs");
				}

				// Add pager slide class prefixes
				if (settings.pager || settings.manualControls) {
					$pager.find('li').each(function (i) {
						$(this).addClass(slideClassPrefix + (i + 1));
					});
				}

				// If we have a pager, we need to set up the selectTab function
				if (settings.pager || settings.manualControls) {
					$tabs = $pager.find('a');

					// Select pager item
					selectTab = function (idx) {
						$tabs
						  .closest("li")
						  .removeClass(activeClass)
						  .eq(idx)
						  .addClass(activeClass);
					};
				}

				// Auto cycle
				if (settings.auto) {

					startCycle = function () {
						rotate = setInterval(function () {

							// Clear the event queue
							$slide.stop(true, true);

							var idx = index + 1 < length ? index + 1 : 0;

							// Remove active state and set new if pager is set
							if (settings.pager || settings.manualControls) {
								selectTab(idx);
							}

							slideTo(idx);
						}, waitTime);

						settings.before(0);
					};

					// Init cycle
					startCycle();
				}

				// Restarting cycle
				restartCycle = function () {
					if (settings.auto) {
						// Stop
						clearInterval(rotate);
						// Restart
						startCycle();
					}
				};

				validateMobile = function () {
				    var check = false;
				    (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true })(navigator.userAgent || navigator.vendor || window.opera);
				    return check;
			    };

				// Pause on hover
				if (settings.pause) {
					$this.hover(function () {
						clearInterval(rotate);
					}, function () {
						restartCycle();
					});
				}


			    //Valida si es movil
				isMobile = validateMobile();
				
				if (isMobile) {
				    //Evento al mover el banner con los dedos

				    var touchDirection = '';
				    touchMoveBanner = function (e) {
				        
				            
				            if (e.originalEvent.touches[0].clientX) {
				                var lastPosition = (touchListLastPosition == false ? 0 : touchListLastPosition);
				                nbPixels = (touchListLastPosition == false ? 1 : Math.abs(lastPosition - e.originalEvent.touches[0].clientX));
				                touchListLastPosition = e.originalEvent.touches[0].clientX;

				                //var touchDirection = '';
				                if (lastPosition > e.originalEvent.touches[0].clientX) {
				                    touchDirection = 'left';
				                } else if (lastPosition < e.originalEvent.touches[0].clientX) {
				                    touchDirection = 'right';
				                }
				            }

				            console.log(touchDirection);
				        

				    };

				    //touch move
				    $this.find('img').on('touchmove', touchMoveBanner);

				    $this.find('img').on('touchend', function (e) {
				        touchListLastPosition = false;

				        var $visibleClass = $("." + visibleClass);

				        // Prevent clicking if currently animated
				        if ($visibleClass.queue('fx').length) {
				            return;
				        }
				        var idx = $slide.index($visibleClass),
                          prevIdx = idx - 1,
                          nextIdx = idx + 1 < length ? index + 1 : 0;

				        // Go to slide

				        var next = touchDirection == 'left' ? prevIdx : nextIdx;
				        console.log('Slide to ' + next);
				        console.log('Slide to ' + touchListLastPosition);
				        slideTo(next);
				        selectTab(next);

				        restartCycle();
				    });

				}

				// Pager click event handler
				if (settings.pager || settings.manualControls) {
					$tabs.bind("click", function (e) {
						e.preventDefault();

						if (!settings.pauseControls) {
							restartCycle();
						}

						// Get index of clicked tab
						var idx = $tabs.index(this);

						// Break if element is already active or currently animated
						if (index === idx || $("." + visibleClass).queue('fx').length) {
							return;
						}

						// Remove active state from old tab and set new one
						selectTab(idx);

						// Do the animation
						slideTo(idx);
					})
					  .eq(0)
					  .closest("li")
					  .addClass(activeClass);

					// Pause when hovering pager
					if (settings.pauseControls) {
						$tabs.hover(function () {
							clearInterval(rotate);
						}, function () {
							restartCycle();
						});
					}
				}

                
                

			    

			    // Navigation
                //Se agrega validación que si es movil no muestre los botones de siguiente
				if (!isMobile && settings.nav) {
					var navMarkup =
					  "<a href='#' class='" + navClass + " prev'>" + settings.prevText + "</a>" +
					  "<a href='#' class='" + navClass + " next'>" + settings.nextText + "</a>";

					// Inject navigation
					if (options.navContainer) {
						$(settings.navContainer).append(navMarkup);
					} else {
						$this.after(navMarkup);
					}

					var $trigger = $("." + namespaceIdx + "_nav"),
					  $prev = $trigger.filter(".prev");

					// Click event handler
					$trigger.bind("click", function (e) {
						e.preventDefault();

						var $visibleClass = $("." + visibleClass);

						// Prevent clicking if currently animated
						if ($visibleClass.queue('fx').length) {
							return;
						}

						//  Adds active class during slide animation
						//  $(this)
						//    .addClass(namespace + "_active")
						//    .delay(fadeTime)
						//    .queue(function (next) {
						//      $(this).removeClass(namespace + "_active");
						//      next();
						//  });

						// Determine where to slide
						var idx = $slide.index($visibleClass),
						  prevIdx = idx - 1,
						  nextIdx = idx + 1 < length ? index + 1 : 0;

						// Go to slide
						slideTo($(this)[0] === $prev[0] ? prevIdx : nextIdx);
						if (settings.pager || settings.manualControls) {
							selectTab($(this)[0] === $prev[0] ? prevIdx : nextIdx);
						}

						if (!settings.pauseControls) {
							restartCycle();
						}
					});

					// Pause when hovering navigation
					if (settings.pauseControls) {
						$trigger.hover(function () {
							clearInterval(rotate);
						}, function () {
							restartCycle();
						});
					}
				}

			}

			// Max-width fallback
			if (typeof document.body.style.maxWidth === "undefined" && options.maxwidth) {
				var widthSupport = function () {
					$this.css("width", "100%");
					if ($this.width() > maxw) {
						$this.css("width", maxw);
					}
				};

				// Init fallback
				widthSupport();
				$(window).bind("resize", function () {
					widthSupport();
				});
			}

		});

	};
});
	

